{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBAEFN,GAAc,SAACO,GAAD,OAAWL,GAAX,mBAA0BK,OACxCJ,EAAc,KAId,SACE,uBACEK,KAAK,OACLC,MAAOP,EACPQ,SAhBoB,SAACL,GACzBF,EAAcE,EAAEM,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UACpDH,GAHmB,+DAMGI,MAAMF,GANT,cAMfG,EANe,gBAOEA,EAAUC,OAPZ,uBAObC,EAPa,EAObA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXf,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdZ,mBAAS,CAAEmB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAOxC,OAJAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAChE,CAACpB,IAEGqB,EDJ2BK,CAAa1B,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,EACC,mBAAGJ,UAAU,yCAAb,yBAEA,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEZrBgB,EAAe,WAAO,IAAD,EACIvC,mBAAS,CAAC,cADd,mBACzBwC,EADyB,KACbzC,EADa,KAQhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGyC,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCZxB6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.241d373e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // prevenimos el envÃ­o del formulario\r\n\r\n    setCategories((cats) => [inputValue, ...cats]);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  // encode uri cambia los espacios por %20\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=d1DvYQ5f6O59f814O2FX5N3Gca3dBXwX`;\r\n\r\n  const respuesta = await fetch(url);\r\n  const { data } = await respuesta.json();\r\n  const gifs = data.map((img) => ({\r\n    id: img.id,\r\n    title: img.title,\r\n    url: img.images?.downsized_medium.url,\r\n  }));\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title}></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category); // luego de los dos puntos va el nombre que le quiero dar\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading ? (\r\n        <p className=\"card animate__animated animate__fadeIn\">Cargando...</p>\r\n      ) : (\r\n        <div className=\"card-grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string,\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => setstate({ data: imgs, loading: false }));\r\n  }, [category]); // si la categoria cambia va a volver a ejecutar el useEffect\r\n\r\n  return state; // { data: [], loading: true }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  // const handleAddCategory = () => {\r\n  //   // setCategories([...categories, \"Death Note\"]);\r\n  //   setCategories((cats) => [...cats, \"Death Note\"]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} /> // el key debe ser unico y no debe ser el indice\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}